
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+112 (git sha1 bf9aaac0f, x86_64-conda-linux-gnu-c++ 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-opensource-eda/conda-opensource-eda/workdir/conda-env/conda-bld/yosys_1753479840435/work=/usr/local/src/conda/yosys-0.55_113_gbf9aaac0f -fdebug-prefix-map=/home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env=/usr/local/src/conda-prefix -fPIC -O3)
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env/share/pdk/gf180mcuD/libs.ref/gf180mcu_fd_sc_mcu7t5v0/lib/gf180mcu_fd_sc_mcu7t5v0__tt_025C_5v00.lib
Imported 229 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v
Parsing SystemVerilog input from `/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v' to AST representation.
Storing AST representation for module `$abstract\state_machine'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\state_machine'.
Generating RTLIL representation for module `\state_machine'.

4.1. Analyzing design hierarchy..
Top module:  \state_machine

4.2. Analyzing design hierarchy..
Top module:  \state_machine
Removing unused module `$abstract\state_machine'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/runs/gf_run5/tmp/synthesis/hierarchy.dot'.
Dumping module state_machine to page 1.
Renaming module state_machine to state_machine.
WARNING: TRISTATE_BUFFER_MAP is defined but could not be found: /home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env/share/pdk/gf180mcuD/libs.tech/openlane/gf180mcu_fd_sc_mcu7t5v0/tribuff_map.v

6. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `state_machine'. Setting top module to state_machine.

6.1. Analyzing design hierarchy..
Top module:  \state_machine

6.2. Analyzing design hierarchy..
Top module:  \state_machine
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63 in module state_machine.
Marked 5 switch rules as full_case in process $proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30 in module state_machine.
Marked 2 switch rules as full_case in process $proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:82$18 in module state_machine.
Marked 1 switch rules as full_case in process $proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:72$15 in module state_machine.
Marked 2 switch rules as full_case in process $proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:61$11 in module state_machine.
Marked 5 switch rules as full_case in process $proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:32$3 in module state_machine.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 13 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_z in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
Found VHDL-style edge-trigger \clk in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
Found async reset \rst_z in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:82$18'.
Found async reset \rst_z in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:72$15'.
Found async reset \rst_z in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:61$11'.
Found async reset \rst_z in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:32$3'.

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
     1/9: $1\allow_vref_sw[10:0]
     2/9: $1\en_vcm_sw_o[0:0]
     3/9: $1\vss_n_o[10:0]
     4/9: $1\vss_p_o[10:0]
     5/9: $1\vref_z_n_o[10:0]
     6/9: $1\vref_z_p_o[10:0]
     7/9: $1\vcm_o[10:0]
     8/9: $1\offset_cal_cycle[0:0]
     9/9: $1\en_comp[0:0]
Creating decoders for process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
     1/17: $5\i[31:0]
     2/17: $0\result[11:0] [11]
     3/17: $0\result[11:0] [10]
     4/17: $0\result[11:0] [9]
     5/17: $0\result[11:0] [8]
     6/17: $0\result[11:0] [7]
     7/17: $0\result[11:0] [6]
     8/17: $0\result[11:0] [5]
     9/17: $0\result[11:0] [4]
    10/17: $0\result[11:0] [3]
    11/17: $0\result[11:0] [2]
    12/17: $0\result[11:0] [1]
    13/17: $0\result[11:0] [0]
    14/17: $3\i[31:0]
    15/17: $2\i[31:0]
    16/17: $1\i[31:0]
    17/17: $4\i[31:0]
Creating decoders for process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:82$18'.
     1/2: $0\counter[11:0] [11]
     2/2: $0\counter[11:0] [10:0]
Creating decoders for process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:72$15'.
     1/1: $0\single_ended_reg[0:0]
Creating decoders for process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:61$11'.
     1/1: $0\counter_sample[0:0]
Creating decoders for process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:32$3'.
     1/1: $0\state[1:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\state_machine.\vcm_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\vref_z_p_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\vref_z_n_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\vss_p_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\vss_n_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\vcm_dummy_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\en_vcm_sw_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\en_comp' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\offset_cal_cycle' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\en_offset_cal_o' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\allow_vcm_sw' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
No latch inferred for signal `\state_machine.\allow_vref_sw' from process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\state_machine.\result' using process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
  created $adff cell `$procdff$313' with positive edge clock and positive level reset.
Creating register for signal `\state_machine.\i' using process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\state_machine.\counter' using process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:82$18'.
  created $adff cell `$procdff$325' with positive edge clock and positive level reset.
Creating register for signal `\state_machine.\single_ended_reg' using process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:72$15'.
  created $adff cell `$procdff$330' with positive edge clock and positive level reset.
Creating register for signal `\state_machine.\counter_sample' using process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:61$11'.
  created $adff cell `$procdff$335' with positive edge clock and positive level reset.
Creating register for signal `\state_machine.\state' using process `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:32$3'.
  created $adff cell `$procdff$340' with positive edge clock and positive level reset.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
Removing empty process `state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:128$63'.
Found and cleaned up 3 empty switches in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
Removing empty process `state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:100$30'.
Found and cleaned up 2 empty switches in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:82$18'.
Removing empty process `state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:82$18'.
Found and cleaned up 1 empty switch in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:72$15'.
Removing empty process `state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:72$15'.
Found and cleaned up 1 empty switch in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:61$11'.
Removing empty process `state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:61$11'.
Found and cleaned up 4 empty switches in `\state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:32$3'.
Removing empty process `state_machine.$proc$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:32$3'.
Cleaned up 12 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module state_machine...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

20. Executing FLATTEN pass (flatten design).

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 19 unused cells and 147 unused wires.

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 31 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 31 unused wires.

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking state_machine.state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Circuit seems to be self-resetting.

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$330 ($adff) from module state_machine (D = \single_ended, Q = \single_ended_reg).
Adding EN signal on $procdff$325 ($adff) from module state_machine (D = $0\counter[11:0], Q = \counter).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [0], Q = \result [0]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [1], Q = \result [1]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [2], Q = \result [2]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [3], Q = \result [3]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [4], Q = \result [4]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [5], Q = \result [5]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [6], Q = \result [6]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [7], Q = \result [7]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [8], Q = \result [8]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [9], Q = \result [9]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [10], Q = \result [10]).
Adding EN signal on $procdff$313 ($adff) from module state_machine (D = $0\result[11:0] [11], Q = \result [11]).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 1 unused cells and 1 unused wires.

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 22 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 22 unused wires.

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.16. Rerunning OPT passes. (Maybe there is more to do..)

25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

25.20. Executing OPT_DFF pass (perform DFF optimizations).

25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.23. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell state_machine.$ne$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:65$13 ($ne).
Removed top 20 bits (of 32) from port A of cell state_machine.$not$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$26 ($not).
Removed top 20 bits (of 32) from port A of cell state_machine.$add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28 ($add).
Removed top 21 bits (of 32) from port B of cell state_machine.$add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28 ($add).
Removed top 19 bits (of 32) from port Y of cell state_machine.$add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28 ($add).
Removed top 19 bits (of 32) from port B of cell state_machine.$and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$29 ($and).
Removed top 20 bits (of 32) from port Y of cell state_machine.$and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$29 ($and).
Removed top 20 bits (of 32) from port A of cell state_machine.$and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$29 ($and).
Removed top 1 bits (of 13) from port B of cell state_machine.$and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$29 ($and).
Removed top 1 bits (of 2) from port B of cell state_machine.$eq$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:105$32 ($eq).
Removed top 1 bits (of 2) from mux cell state_machine.$procmux$306 ($mux).
Removed top 20 bits (of 32) from port Y of cell state_machine.$not$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$26 ($not).
Removed top 1 bits (of 13) from port Y of cell state_machine.$add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28 ($add).
Removed top 20 bits (of 32) from wire state_machine.$add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28_Y.
Removed top 20 bits (of 32) from wire state_machine.$not$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$26_Y.
Removed top 1 bits (of 2) from wire state_machine.$procmux$306_Y.

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 4 unused wires.

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module state_machine:
  creating $macc model for $add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28 ($add).
  creating $alu model for $macc $add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28.
  creating $alu cell for $add$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:97$28: $auto$alumacc.cc:495:replace_alu$454
  created 1 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 10 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 45 unused wires.

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
    Consolidated identical input bits for $mux cell $procmux$297:
      Old ports: A=2'10, B=2'00, Y=$procmux$297_Y
      New ports: A=1'1, B=1'0, Y=$procmux$297_Y [1]
      New connections: $procmux$297_Y [0] = 1'0
  Optimizing cells in module \state_machine.
Performed a total of 1 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $procmux$131 in front of them:
        $or$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:141$89
        $or$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:151$117

    Found cells that share an operand and can be merged by moving the $mux $procmux$149 in front of them:
        $and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:135$76
        $and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:145$100

    Found cells that share an operand and can be merged by moving the $mux $procmux$152 in front of them:
        $and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:134$75
        $and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:144$99

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 6 unused wires.

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $auto$opt_share.cc:244:merge_operators$464 in front of them:
        $and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:141$87
        $and$/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/state_machine.v:151$115

36.15. Executing OPT_DFF pass (perform DFF optimizations).

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 5 unused wires.

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

36.18. Rerunning OPT passes. (Maybe there is more to do..)

36.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

36.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

36.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 1 cells.

36.22. Executing OPT_SHARE pass.

36.23. Executing OPT_DFF pass (perform DFF optimizations).

36.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 2 unused wires.

36.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

36.26. Rerunning OPT passes. (Maybe there is more to do..)

36.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

36.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

36.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.30. Executing OPT_SHARE pass.

36.31. Executing OPT_DFF pass (perform DFF optimizations).

36.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

36.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

36.34. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 79 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 145 unused wires.

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\state_machine' to `<abc-temp-dir>/input.blif'..
Extracted 391 gates and 440 wires to a netlist network with 47 inputs and 99 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:            ANDNOT cells:      119
ABC RESULTS:               MUX cells:       53
ABC RESULTS:              NAND cells:       28
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:       24
ABC RESULTS:                OR cells:       40
ABC RESULTS:             ORNOT cells:       28
ABC RESULTS:        internal signals:      294
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       99
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 273 unused wires.

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `state_machine'. Setting top module to state_machine.

41.1. Analyzing design hierarchy..
Top module:  \state_machine

41.2. Analyzing design hierarchy..
Top module:  \state_machine
Removed 0 unused modules.

42. Printing statistics.

=== state_machine ===

   Number of wires:                261
   Number of wire bits:            372
   Number of public wires:          28
   Number of public wire bits:     116
   Number of ports:                 23
   Number of port bits:             88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                342
     $_ANDNOT_                     119
     $_AND_                         17
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                   24
     $_DFF_PN0_                      3
     $_MUX_                         53
     $_NAND_                        28
     $_NOR_                          5
     $_NOT_                         24
     $_ORNOT_                       28
     $_OR_                          40

43. Executing CHECK pass (checking for obvious problems).
Checking module state_machine...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/runs/gf_run5/tmp/synthesis/post_techmap.dot'.
Dumping module state_machine to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

48. Printing statistics.

=== state_machine ===

   Number of wires:                261
   Number of wire bits:            372
   Number of public wires:          28
   Number of public wire bits:     116
   Number of ports:                 23
   Number of port bits:             88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                342
     $_ANDNOT_                     119
     $_AND_                         17
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                   24
     $_DFF_PN0_                      3
     $_MUX_                         53
     $_NAND_                        28
     $_NOR_                          5
     $_NOT_                         24
     $_ORNOT_                       28
     $_OR_                          40

49. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell gf180mcu_fd_sc_mcu7t5v0__dffnq_1 (noninv, pins=3, area=65.86) is a direct match for cell type $_DFF_N_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffq_1 (noninv, pins=3, area=63.66) is a direct match for cell type $_DFF_P_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_NN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_NN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_PN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_PN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 (noninv, pins=5, area=94.39) is a direct match for cell type $_DFFSR_NNN_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 (noninv, pins=5, area=85.61) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \gf180mcu_fd_sc_mcu7t5v0__dffnq_1 _DFF_N_ (.CLKN( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffq_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 _DFF_NN0_ (.CLKN( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 _DFF_NN1_ (.CLKN( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    \gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 _DFFSR_NNN_ (.CLKN( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

49.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\state_machine':
  mapped 28 $_DFF_PN0_ cells to \gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 cells.

50. Printing statistics.

=== state_machine ===

   Number of wires:                286
   Number of wire bits:            397
   Number of public wires:          28
   Number of public wire bits:     116
   Number of ports:                 23
   Number of port bits:             88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                367
     $_ANDNOT_                     119
     $_AND_                         17
     $_MUX_                         78
     $_NAND_                        28
     $_NOR_                          5
     $_NOT_                         24
     $_ORNOT_                       28
     $_OR_                          40
     gf180mcu_fd_sc_mcu7t5v0__dffrnq_1     28

[INFO]: USING STRATEGY AREA 0

51. Executing ABC pass (technology mapping using ABC).

51.1. Extracting gate netlist of module `\state_machine' to `/tmp/yosys-abc-4jBEZ4/input.blif'..
Extracted 339 gates and 387 wires to a netlist network with 48 inputs and 96 outputs.

51.1.1. Executing ABC.
Running ABC command: "/home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env/bin/yosys-abc" -s -f /tmp/yosys-abc-4jBEZ4/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-4jBEZ4/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-4jBEZ4/input.blif 
ABC: + read_lib -w /home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/runs/gf_run5/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__antenna" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_3".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_16".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_4".
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__endcap" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__filltie" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__hold".
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_3".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_16".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_4".
ABC: Library "gf180mcuD_merged" from "/home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/runs/gf_run5/tmp/synthesis/trimmed.lib" has 143 cells (72 skipped: 36 seq; 15 tri-state; 21 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =   23.82 MB. Time =     0.12 sec
ABC: Warning: Detected 6 multi-output gates (for example, "gf180mcu_fd_sc_mcu7t5v0__addf_1").
ABC: + read_constr -v /home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/runs/gf_run5/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "gf180mcu_fd_sc_mcu7t5v0__inv_1".
ABC: Setting output load to be 72.910004.
ABC: + read_constr /home/khanhduy/Sar_ADC_12bit/Schematic/state_machine/runs/gf_run5/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 50000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 50000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 3000 
ABC: + upsize -D 50000 
ABC: Current delay (3417.69 ps) does not exceed the target delay (50000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 50000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    288 ( 24.7 %)   Cap = 29.9 ff (  6.6 %)   Area =     4388.20 ( 82.6 %)   Delay =  4238.54 ps  (  3.5 %)               
ABC: Path  0 --       3 : 0    7 pi                               A =   0.00  Df = 258.8  -96.2 ps  S = 501.6 ps  Cin =  0.0 ff  Cout =  27.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     162 : 1   10 gf180mcu_fd_sc_mcu7t5v0__buf_1   A =  13.17  Df = 882.2 -163.5 ps  S = 786.9 ps  Cin =  2.9 ff  Cout =  44.3 ff  Cmax = 238.8 ff  G = 1543  
ABC: Path  2 --     163 : 1   10 gf180mcu_fd_sc_mcu7t5v0__buf_1   A =  13.17  Df =1532.2 -192.1 ps  S = 814.8 ps  Cin =  2.9 ff  Cout =  46.0 ff  Cmax = 238.8 ff  G = 1601  
ABC: Path  3 --     164 : 1   10 gf180mcu_fd_sc_mcu7t5v0__buf_1   A =  13.17  Df =2200.1 -222.3 ps  S = 845.9 ps  Cin =  2.9 ff  Cout =  47.9 ff  Cmax = 238.8 ff  G = 1667  
ABC: Path  4 --     167 : 4    1 gf180mcu_fd_sc_mcu7t5v0__oai31_1 A =  24.15  Df =4238.5-1187.0 ps  S =3885.5 ps  Cin =  4.5 ff  Cout =  72.9 ff  Cmax =  73.4 ff  G = 1608  
ABC: Start-point = pi2 (\single_ended_reg).  End-point = po5 (\data [5]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   48/   96  lat =    0  nd =   288  edge =    675  area =4388.34  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-4jBEZ4/output.blif 

51.1.2. Re-integrating ABC results.
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and2_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and3_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi211_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi21_1 cells:       10
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi22_1 cells:       14
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__buf_1 cells:       33
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__clkinv_1 cells:       30
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__inv_1 cells:        8
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__mux2_2 cells:        9
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand2_1 cells:       66
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand3_1 cells:        6
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand4_1 cells:        5
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor2_1 cells:       26
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor3_1 cells:        7
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor4_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai211_1 cells:       12
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai21_1 cells:       31
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai221_1 cells:        5
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai22_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai31_1 cells:        7
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai32_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__or2_1 cells:        8
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__or3_1 cells:        3
ABC RESULTS:        internal signals:      243
ABC RESULTS:           input signals:       48
ABC RESULTS:          output signals:       96
Removing temp directory.

52. Executing SETUNDEF pass (replace undef values with defined constants).

53. Executing HILOMAP pass (mapping to constant drivers).

54. Executing SPLITNETS pass (splitting up multi-bit signals).

55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 397 unused wires.

56. Executing INSBUF pass (insert buffer cells for connected wires).

57. Executing CHECK pass (checking for obvious problems).
Checking module state_machine...
Found and reported 0 problems.

58. Printing statistics.

=== state_machine ===

   Number of wires:                271
   Number of wire bits:            336
   Number of public wires:          51
   Number of public wire bits:     116
   Number of ports:                 23
   Number of port bits:             88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                316
     gf180mcu_fd_sc_mcu7t5v0__and2_1      1
     gf180mcu_fd_sc_mcu7t5v0__and3_1      2
     gf180mcu_fd_sc_mcu7t5v0__aoi211_1      1
     gf180mcu_fd_sc_mcu7t5v0__aoi21_1     10
     gf180mcu_fd_sc_mcu7t5v0__aoi22_1     14
     gf180mcu_fd_sc_mcu7t5v0__buf_1     33
     gf180mcu_fd_sc_mcu7t5v0__clkinv_1     30
     gf180mcu_fd_sc_mcu7t5v0__dffrnq_1     28
     gf180mcu_fd_sc_mcu7t5v0__inv_1      8
     gf180mcu_fd_sc_mcu7t5v0__mux2_2      9
     gf180mcu_fd_sc_mcu7t5v0__nand2_1     66
     gf180mcu_fd_sc_mcu7t5v0__nand3_1      6
     gf180mcu_fd_sc_mcu7t5v0__nand4_1      5
     gf180mcu_fd_sc_mcu7t5v0__nor2_1     26
     gf180mcu_fd_sc_mcu7t5v0__nor3_1      7
     gf180mcu_fd_sc_mcu7t5v0__nor4_1      2
     gf180mcu_fd_sc_mcu7t5v0__oai211_1     12
     gf180mcu_fd_sc_mcu7t5v0__oai21_1     31
     gf180mcu_fd_sc_mcu7t5v0__oai221_1      5
     gf180mcu_fd_sc_mcu7t5v0__oai22_1      1
     gf180mcu_fd_sc_mcu7t5v0__oai31_1      7
     gf180mcu_fd_sc_mcu7t5v0__oai32_1      1
     gf180mcu_fd_sc_mcu7t5v0__or2_1      8
     gf180mcu_fd_sc_mcu7t5v0__or3_1      3

   Chip area for module '\state_machine': 6478.035200
     of which used for sequential elements: 2089.830400 (32.26%)

59. Executing Verilog backend.
Dumping module `\state_machine'.

60. Executing JSON backend.

End of script. Logfile hash: 4c492c6639, CPU: user 0.37s system 0.01s, MEM: 67.49 MB peak
Yosys 0.55+112 (git sha1 bf9aaac0f, x86_64-conda-linux-gnu-c++ 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-opensource-eda/conda-opensource-eda/workdir/conda-env/conda-bld/yosys_1753479840435/work=/usr/local/src/conda/yosys-0.55_113_gbf9aaac0f -fdebug-prefix-map=/home/khanhduy/conda-gf180mcu-env/envs/gf180mcu-env=/usr/local/src/conda-prefix -fPIC -O3)
Time spent: 47% 2x abc (0 sec), 13% 4x stat (0 sec), ...
